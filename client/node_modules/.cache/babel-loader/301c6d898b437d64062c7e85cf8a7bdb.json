{"ast":null,"code":"import axios from \"axios\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT, CLEAR_PROFILE } from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  return async dispatch => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n\n    try {\n      const res = await axios.post(\"/api/users\", body, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      dispatch(loadUser());\n    } catch (err) {\n      const errors = err.response.data.errors;\n\n      if (errors) {\n        console.log(\"error\");\n      }\n\n      dispatch({\n        type: REGISTER_FAIL\n      });\n    }\n  };\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n    setAuthToken(res.data.token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      console.log(\"error\");\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/rionsawabe/HikingSNS/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","CLEAR_PROFILE","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","console","log","login","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n\tREGISTER_SUCCESS,\n\tREGISTER_FAIL,\n\tUSER_LOADED,\n\tAUTH_ERROR,\n\tLOGIN_FAIL,\n\tLOGIN_SUCCESS,\n\tLOGOUT,\n\tCLEAR_PROFILE\n} from \"./types\";\nimport setAuthToken from \"../utils/setAuthToken\";\n\nexport const loadUser = () => async (dispatch) => {\n\tif (localStorage.token) {\n\t\tsetAuthToken(localStorage.token);\n\t}\n\n\ttry {\n\t\tconst res = await axios.get(\"/api/auth\");\n\n\t\tdispatch({\n\t\t\ttype: USER_LOADED,\n\t\t\tpayload: res.data\n\t\t});\n\t} catch (err) {\n\t\tdispatch({\n\t\t\ttype: AUTH_ERROR\n\t\t});\n\t}\n};\n\nexport const register =\n\t({ name, email, password }) =>\n\tasync (dispatch) => {\n\t\tconst config = {\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\"\n\t\t\t}\n\t\t};\n\n\t\tconst body = JSON.stringify({ name, email, password });\n\n\t\ttry {\n\t\t\tconst res = await axios.post(\"/api/users\", body, config);\n\n\t\t\tdispatch({\n\t\t\t\ttype: REGISTER_SUCCESS,\n\t\t\t\tpayload: res.data\n\t\t\t});\n\t\t\tdispatch(loadUser());\n\t\t} catch (err) {\n\t\t\tconst errors = err.response.data.errors;\n\t\t\tif (errors) {\n\t\t\t\tconsole.log(\"error\");\n\t\t\t}\n\t\t\tdispatch({\n\t\t\t\ttype: REGISTER_FAIL\n\t\t\t});\n\t\t}\n\t};\n\n//Login User\nexport const login = (email, password) => async (dispatch) => {\n\tconst config = {\n\t\theaders: {\n\t\t\t\"Content-Type\": \"application/json\"\n\t\t}\n\t};\n\n\tconst body = JSON.stringify({ email, password });\n\n\ttry {\n\t\tconst res = await axios.post(\"/api/auth\", body, config);\n\t\tsetAuthToken(res.data.token);\n\t\tdispatch({\n\t\t\ttype: LOGIN_SUCCESS,\n\t\t\tpayload: res.data\n\t\t});\n\n\t\tdispatch(loadUser());\n\t} catch (err) {\n\t\tconst errors = err.response.data.errors;\n\t\tif (errors) {\n\t\t\tconsole.log(\"error\");\n\t\t}\n\t\tdispatch({\n\t\t\ttype: LOGIN_FAIL\n\t\t});\n\t}\n};\n\nexport const logout = () => (dispatch) => {\n\tdispatch({ type: CLEAR_PROFILE });\n\tdispatch({ type: LOGOUT });\n};\n"]},"metadata":{},"sourceType":"module"}